apply plugin: 'com.android.application'

// Enable collecting coverage also for unit tests
apply plugin: 'jacoco'

jacoco {
    // This should match the one inside build.gradle
    toolVersion = '0.8.5'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    // This will break JDK 9 otherwise
    jacoco.excludes = ['jdk.internal.*']
}

// General switch for tests types this control report generation but not yet unit test selection
def carvedTests = project.hasProperty('carvedTests') ? project.getProperty('carvedTests') : false //Default value false

android {

    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    testOptions.unitTests.includeAndroidResources = true
    defaultConfig {
        applicationId "abc.basiccalculator"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            // returnDefaultValues = true
        }

        unitTests.all {

            // Filter tests using annotation
            useJUnit {
                if (carvedTests) {
                    includeCategories 'de.unipassau.abc.Carved'
                } else {
                    excludeCategories 'de.unipassau.abc.Carved'
                }
            }

            // Nices output on the console
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }


            jacoco {
                includeNoLocationClasses = true
            }

            test {
                //Get last path of default set path.
                def junitXmlTestTaskName = file("$reports.junitXml.destination").name
                def htmlTestTaskName = file("$reports.html.destination").name

                if ( carvedTests ) {
                    // reportDir = "${buildDir}/carved-tests/test-report"
                    // resultsDir = "${buildDir}/carved-tests/test-results"
                    reports.junitXml.destination = file("${buildDir}/carved-tests/test-report/${junitXmlTestTaskName}")// file("../../output/$junitXmlTestTaskName")
                    reports.html.destination = file("${buildDir}/carved-tests/test-results/${htmlTestTaskName}") // file("../../output/$htmlTestTaskName")
                } else {
                    // reportDir = "${buildDir}/original-tests/test-report"
                    // resultsDir = "${buildDir}/original-tests/test-results"
                    reports.junitXml.destination = file("${buildDir}/original-tests/test-report/${junitXmlTestTaskName}") // file("../../output/$junitXmlTestTaskName")
                    reports.html.destination = file("${buildDir}/original-tests/test-results/${htmlTestTaskName}") // file("../../output/$htmlTestTaskName")
                }

            }

        }

        
    } 

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'net.objecthunter:exp4j:0.4.8'

    // Unit tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.robolectric:robolectric:4.3'

    // Espresso/UI tests
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
}

task jacocoTestsReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running the Original Tests."

    reports {
        xml.enabled = true
        html.enabled = true
        if ( carvedTests ) {
                html.destination file("${buildDir}/carved-tests/coverage/html")
                xml.destination file("${buildDir}/carved-tests/coverage/xml")
        } else {
                html.destination file("${buildDir}/original-tests/coverage/html")
                xml.destination file("${buildDir}/original-tests/coverage/xml")
            }
        
    }

    def fileFilter = ['androidx/**/*.*',
                      '**/view/*.*',
                      '**/data/*.*',
                      '**/data/model/*.*',
                      '**/generated/callback/*.*',
                      '**/lambda$*.class',
                      '**/lambda.class',
                      '**/*lambda.class',
                      '**/*lambda*.class']

    def debugTree = fileTree(dir:
            "${buildDir}/intermediates/javac/debug/classes",
            excludes: fileFilter
    )

    def mainSrc = "/src/main/java"
    
    sourceDirectories = files([mainSrc])
    
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "${buildDir}", includes:[
            "/jacoco/testDebugUnitTest.exec"])
}