apply plugin: 'com.android.application'

// Enable collecting coverage also for unit tests
apply plugin: 'jacoco'

jacoco {
    // This should match the one inside build.gradle
    toolVersion = '0.8.6'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    // This will break JDK 9 otherwise
    jacoco.excludes = ['jdk.internal.*']
}

// General switch for tests types this control report generation but not yet unit test selection - TODO Make this a flag
def carvedTests = project.hasProperty('carvedTests')// ? project.getProperty('carvedTests') : false //Default value false

def carvedTestSrcDir = "src/carvedTest"
def testReportPrefix = "${buildDir}/carvedTest/testExecution"
def coverageReportPrefix = "${buildDir}/carvedTest/coverage"

if (carvedTests){
    if (project.hasProperty('testName')){
        def testName = project.getProperty('testName')
        println ""
        println "* Processing Carved Test ${testName}"
        println ""
        
        carvedTestSrcDir = "src/carvedTest/${testName}"

        testReportPrefix = "${buildDir}/carvedTest/${testName}/testExecution"
        coverageReportPrefix = "${buildDir}/carvedTest/${testName}/coverage"
    }
}


android {

    // Change the src folder for carved tests
    sourceSets {
        test {
            if (carvedTests) {
                java.srcDirs = ["$carvedTestSrcDir"]
            }            
        }
    }


    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    
    defaultConfig {
        applicationId "abc.basiccalculator"
        minSdkVersion 22 // Enable the Multi Dex Thingy 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }

        toInstrument {
            testCoverageEnabled false
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        unitTests.all {

            // Nices output on the console/logs
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }

            jacoco {
                includeNoLocationClasses = true
            }

            test {
                //Get last path of default set path.
                def junitXmlTestTaskName = file("$reports.junitXml.destination").name
                def htmlTestTaskName = file("$reports.html.destination").name

                if ( carvedTests ) {
                    // Just use the same?
                    reports.junitXml.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                    reports.html.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                } 
            }
        }
    } 

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    implementation 'net.objecthunter:exp4j:0.4.8'

    // Unit tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    /*
        Using 4.4 results in this error: 	
        java.lang.NoSuchMethodError: 'com.google.common.collect.ImmutableList com.google.common.collect.ImmutableList.sortedCopyOf(java.util.Comparator, java.lang.Iterable)'
            at org.robolectric.internal.bytecode.ShadowProviders.<init>(ShadowProviders.java:25)
    */

    // testImplementation 'org.robolectric:robolectric:4.4'
    // testImplementation 'org.robolectric:robolectric:4.3'

    // The following raise the error: "java.lang.RuntimeException: huh? java 11, need help!"
    // With java 8 and robolectric 4.1 work
    testImplementation 'org.robolectric:robolectric:4.2'
    // testImplementation 'org.robolectric:robolectric:4.1'
    // testImplementation 'de.unipassau.abc:test-utils:1.0-SNAPSHOT'
    // testImplementation 'com.google.guava:guava:27.0.1-jre'
    testImplementation 'org.mockito:mockito-core:2.6.3'
    // androidTestCompile 'org.mockito:mockito-android:2.6.3'


    // Espresso/UI tests
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
}

task jacocoTestsReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running the Original Tests."

    reports {
        xml.enabled = true
        html.enabled = true
        // TODO Move this above 
        if ( carvedTests ) {


                println "\n\n\n\n\n\n"
                println " -- " + file("$coverageReportPrefix/html")

                html.destination file("$coverageReportPrefix/html")
                xml.destination file("$coverageReportPrefix/xml")
        }
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.class',
                      'androidx/**/*.*',
                      '**/view/*.*',
                      '**/data/*.*',
                      '**/data/model/*.*',
                      '**/generated/callback/*.*',
                      '**/lambda$*.class',
                      '**/lambda.class',
                      '**/*lambda.class',
                      '**/*lambda*.class']

    def debugTree = fileTree(dir:
            "${buildDir}/intermediates/javac/debug/classes",
            excludes: fileFilter
    )

    def mainSrc = "/src/main/java"
    
    //sourceDirectories = files([mainSrc])
    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: "${buildDir}", includes:[
            "/jacoco/testDebugUnitTest.exec"]))
    //classDirectories = files([debugTree])
    //executionData = fileTree(dir: "${buildDir}", includes:[
    //        "/jacoco/testDebugUnitTest.exec"])
}
