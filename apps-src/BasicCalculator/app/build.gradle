apply plugin: 'com.android.application'
apply plugin: 'jacoco'

jacoco {
    // This should match the one inside build.gradle
    toolVersion = '0.8.5'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "abc.basiccalculator"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }
    testOptions {
        // Those two lines fail connectedAndroidTests
        // execution 'ANDROID_TEST_ORCHESTRATOR'
        // animationsDisabled true

        unitTests {
            includeAndroidResources = true
            //  unitTests.returnDefaultValues = true?
            returnDefaultValues = true
        }
        unitTests.all {
        // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
            jacoco {
                includeNoLocationClasses = true
            }
        }
    } 
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'net.objecthunter:exp4j:0.4.8'

    // Required -- JUnit 4 framework
    testImplementation 'junit:junit:4.12'
    // testImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'
    // Optional -- Robolectric environment
    // testImplementation 'androidx.test:core:1.0.0'
    testImplementation 'org.robolectric:robolectric:4.3'
    // Optional -- Mockito framework
    // testImplementation 'org.mockito:mockito-core:1.10.19'

    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
}

// Note leaving the "createDebugCoverageReport" causes the Espresso test to run as well
// task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
// task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

//     reports {
//         xml.enabled = true
//         html.enabled = true
//     }

//     def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//     def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
//     def mainSrc = "$project.projectDir/src/main/java"

//     sourceDirectories = files([mainSrc])
//     classDirectories = files([debugTree])
//     executionData = fileTree(dir: project.buildDir, includes: [
//             'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
//     ])
// }

// task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['androidx/**/*.*',
                      '**/view/*.*',
                      '**/data/*.*',
                      '**/data/model/*.*',
                      '**/generated/callback/*.*',
                      '**/lambda$*.class',
                      '**/lambda.class',
                      '**/*lambda.class',
                      '**/*lambda*.class']

    def debugTree = fileTree(dir:
            "${buildDir}/intermediates/javac/debug/classes",
            excludes: fileFilter
    )

    def mainSrc = "/src/main/java"
    
    sourceDirectories = files([mainSrc])
    
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "${buildDir}", includes:[
            "/jacoco/testDebugUnitTest.exec"])
}