
### MAIN VARIABLES
GW="./gradlew"
ABC="../../scripts/abc.sh"
ABC_CFG="../../scripts/.abc-config"
JAVA_OPTS=" -Dabc.instrument.fields.operations -Dabc.taint.android.intents -Dabc.instrument.include=abc.basiccalculator"

ADB := $(shell $(ABC) show-config  ANDROID_ADB_EXE | sed -e "s|ANDROID_ADB_EXE=||")
ESPRESSO_TESTS := $(shell cat tests.txt | sed '/^[[:space:]]*$$/d' | sed -e 's| |__|g' -e 's|^\(.*\)$$|\1.testlog|')

.PHONY: clean-gradle clean-all run-espresso-tests trace-espresso-tests

show :
	$(info $(ADB))

clean-gradle :
	$(GW) clean

clean-all :
	$(RM) -v *.apk
	$(RM) -v *.log
	$(RM) -v *.testlog
	$(RM) -rv .traced
	$(RM) -rv traces
	$(RM) -rv app/src/carvedTest
	$(RM) -rv .carved
	$(RM) -rv espresso-tests-coverage unit-tests-coverage carved-test-coverage


app-original.apk : 
	export ABC_CONFIG=$(ABC_CFG) && \
	$(GW) -PjacocoEnabled=false assembleDebug && \
	mv app/build/outputs/apk/debug/app-debug.apk . && \
	$(ABC) sign-apk app-debug.apk && \
	mv -v app-debug.apk app-original.apk

app-instrumented.apk : app-original.apk
	export ABC_CONFIG=$(ABC_CFG) && \
	export JAVA_OPTS=$(JAVA_OPTS) && \
	$(ABC) instrument-apk app-original.apk && \
	mv -v ../../code/ABC/instrumentation/instrumented-apks/app-original.apk app-instrumented.apk

app-androidTest.apk :
	export ABC_CONFIG=$(ABC_CFG) && \
	$(GW) assembleAndroidTest && \
	mv ./app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk app-androidTest-unsigned.apk && \
	$(ABC) sign-apk app-androidTest-unsigned.apk && \
	mv -v app-androidTest-unsigned.apk app-androidTest.apk

running-emulator:
	export ABC_CONFIG=$(ABC_CFG) && $(ABC) start-clean-emulator
	touch running-emulator

stop-emulator:
	export ABC_CONFIG=$(ABC_CFG) && $(ABC) stop-all-emulators
	$(RM) running-emulator

espresso-tests.log : app-original.apk app-androidTest.apk running-emulator
	export ABC_CONFIG=$(ABC_CFG) && $(ABC) install-apk app-original.apk
	export ABC_CONFIG=$(ABC_CFG) && $(ABC) install-apk app-androidTest.apk	
	$(ADB) shell am instrument -w -r abc.basiccalculator.test/androidx.test.runner.AndroidJUnitRunner | tee espresso-tests.log 
	export ABC_CONFIG=$(ABC_CFG) && $(ABC) stop-all-emulators
	$(RM) running-emulator

.traced : $(ESPRESSO_TESTS) app-androidTest.apk app-instrumented.apk
	# Once execution of the dependent target is over we tear down the emulator
	export ABC_CONFIG=$(ABC_CFG) && $(ABC) stop-all-emulators
	$(RM) running-emulator
	touch .traced

# Note: https://stackoverflow.com/questions/9052220/hash-inside-makefile-shell-call-causes-unexpected-behaviour
# This target checks whether the app was already installed and reset it instead of redeploying it every time
%.testlog: app-androidTest.apk app-instrumented.apk running-emulator

	$(eval FIRST_RUN := $(shell $(ADB) shell pm list packages | grep -c abc.basiccalculator))
	@if [ "$(FIRST_RUN)" == "2" ]; then \
		echo "Resetting the data of the apk"; \
		$(ADB) shell pm clear abc.basiccalculator; \
	else \
	 	echo "Installing the apk" ;\
		export ABC_CONFIG=$(ABC_CFG) && $(ABC) install-apk app-instrumented.apk; \
		echo "Installing the test apk" ;\
		export ABC_CONFIG=$(ABC_CFG) && $(ABC) install-apk app-androidTest.apk; \
	fi

	$(eval TEST_NAME := $(shell echo "$(@)" | sed -e 's|__|\\\#|g' -e 's|.testlog||'))
	echo "Tracing test $(TEST_NAME)"
	$(ADB) shell am instrument -w -e class $(TEST_NAME) abc.basiccalculator.test/androidx.test.runner.AndroidJUnitRunner 2>&1 | tee $(@)

	export ABC_CONFIG=$(ABC_CFG) && $(ABC) copy-traces abc.basiccalculator ./traces/$(TEST_NAME) force-clean


carve-all .carved : .traced app-original.apk
	export ABC_CONFIG=$(ABC_CFG) && \
	$(ABC) carve-all app-original.apk traces app/src/carvedTest force-clean 2>&1 | tee carving.log
	touch .carved

# SOMEHOW .traced breaks it?
carve-one : .traced app-original.apk
	export ABC_CONFIG=$(ABC_CFG) && \
	$(ABC) carve-one app-original.apk traces app/src/carvedTest force-clean 2>&1 | tee carving.log

carve-cached-traces : app-original.apk
	export ABC_CONFIG=$(ABC_CFG) && \
		$(ABC) carve-all app-original.apk traces app/src/carvedTest force-clean 2>&1 | tee carving.log

# Run but do not collect coverage
run-all-carved-tests :
	$(GW) -PjacocoEnabled=false clean testDebugUnitTest -PcarvedTests 2>&1 | tee carvedTests.log

### ### ### ### ### ### ### 
### Coverage targets
### ### ### ### ### ### ### 

# UPDATE THIS WITH TO CHECK THE RIGHT FILES .covered or index.html
coverage-espresso-tests : 
	export ABC_CONFIG=$(ABC_CFG) && \
	abc start-clean-emulator && \
	$(GW) -PjacocoEnabled=true -PcarvedTests=false clean jacocoGUITestCoverage && \
	mkdir -p espresso-test-coverage && \
	cp -r app/build/reports/jacoco/jacocoGUITestCoverage espresso-test-coverage && \
	$(ABC) stop-all-emulators

# UPDATE THIS WITH TO CHECK THE RIGHT FILES .covered or index.html
coverage-unit-tests :
	$(GW) -PjacocoEnabled=true -PcarvedTests=false clean jacocoUnitTestCoverage
	$(RM) -r unit-tests-coverage
	mv -v app/build/reports/jacoco/jacocoUnitTestCoverage unit-tests-coverage

# UPDATE THIS WITH TO CHECK THE RIGHT FILES .covered or index.html.  --info
coverage-carved-tests :
	$(GW) -PjacocoEnabled=true -PcarvedTests=true clean jacocoUnitTestCoverage
	$(RM) -r  carved-test-coverage
	mv -v build/carvedTest/coverage carved-test-coverage

