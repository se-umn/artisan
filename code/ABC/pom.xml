<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>de.unipassau.abc</groupId>
	<artifactId>abc-parent</artifactId>

	<packaging>pom</packaging>

	<version>1.0-SNAPSHOT</version>

	<name>Action-Based Test Carving for Android </name>

	<properties>
		<maven.multiModuleProjectDirectory>/Users/gambi/action-based-test-carving/code/ABC</maven.multiModuleProjectDirectory>
	</properties>

	<developers>
		<developer>
			<id>gambi</id>
			<name>Alessio Gambi</name>
			<email>alessio.gambi@uni-passau.de</email>
		</developer>
		<!-- Add -->
	</developers>

	<repositories>
		<repository>
			<id>project</id>
			<url>file:///${maven.multiModuleProjectDirectory}/local-repo</url>
		</repository>
		<repository>
			<id>google</id>
			<url>https://maven.google.com</url>
		</repository>
		<repository>
			<id>central</id>
			<url>https://repo1.maven.org/maven2/</url>
		</repository>
	</repositories>

	<modules>
		<module>common</module>
		<module>test-utils</module>
		<module>instrumentation</module>
		<module>carving</module>
		<module>synthesis</module>
	</modules>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.5.1</version>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>appassembler-maven-plugin</artifactId>
					<version>1.10</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	
	<!-- https://dzone.com/articles/maven-multi-module-project-with-versioning -->
	<dependencyManagement>
	    <dependencies>      
	<!-- Common Logging Framework -->

		<!-- TODO Is this conflicting with Soot? -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.7.20</version>
			<!-- <scope>test</scope> -->
		</dependency>
		<dependency>
		<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
					<version>1.7.20</version>
					</dependency>
		
		    </dependencies>      

	</dependencyManagement>

	<dependencies>
		

		<!-- From the old dyniac project -->
		<!-- TODO This must be removed ! -->
		<dependency>
			<groupId>com.google.android</groupId>
			<artifactId>android</artifactId>
			<version>28</version>
			<scope>system</scope>
            <systemPath>${maven.multiModuleProjectDirectory}/scripts/android.jar</systemPath>
		</dependency>

		<!-- Command Line parsing -->
		<dependency>
			<groupId>com.lexicalscope.jewelcli</groupId>
			<artifactId>jewelcli</artifactId>
			<version>0.8.9</version>
		</dependency>

		<!-- Graph Datastructures and Visualization -->
		<!-- TODO Check if ALL those libraries are really needed -->
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-graph-impl</artifactId>
			<version>2.1.1</version>
		</dependency>
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-visualization</artifactId>
			<version>2.1.1</version>
		</dependency>
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-api</artifactId>
			<version>2.1.1</version>
		</dependency>
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-algorithms</artifactId>
			<version>2.1.1</version>
		</dependency>
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-io</artifactId>
			<version>2.1.1</version>
		</dependency>

		<!-- Is this shared among all the component? -->
		<!-- <dependency>
			<groupId>sable</groupId>
			<artifactId>soot</artifactId>
			<version>2.6.0-SNAPSHOT</version>
		</dependency> -->
		<dependency>
			<groupId>org.soot-oss</groupId>
			<artifactId>soot</artifactId>
			<version>4.2.1-abc</version>
                </dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
		</dependency>

		<dependency>
    		<groupId>org.hamcrest</groupId>
    		<artifactId>hamcrest</artifactId>
    		<version>2.2</version>
    	</dependency>

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-core</artifactId>
			<version>2.2</version>
		</dependency>

		<dependency>
			<groupId>com.github.stefanbirkner</groupId>
			<artifactId>system-rules</artifactId>
			<version>1.19.0</version>
			<scope>test</scope>
		</dependency>
		
		
		<!-- Mocking -->
		<!-- We use mocking to generate code -->
		<!-- <dependency> <groupId>org.mockito</groupId> <artifactId>mockito-all</artifactId> 
			<version>1.9.5</version> <scope>test</scope> </dependency> -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>1.10.19</version>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-mockito</artifactId>
			<version>1.5.6</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4</artifactId>
			<version>1.5.6</version>
			<scope>test</scope>
		</dependency>
		
		<!-- Plain Java Code Generation: https://github.com/square/javapoet -->
		<!-- TODO Build code from available code instructions ! -->
		<dependency>
			<groupId>com.squareup</groupId>
			<artifactId>javapoet</artifactId>
			<version>1.11.1</version>
		</dependency>

		<dependency>
			<groupId>org.robolectric</groupId>
			<artifactId>robolectric</artifactId>
			<version>4.2</version>
			<exclusions>
				<exclusion>
					<groupId>androidx.test</groupId>
					<artifactId>monitor</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		
		<!-- Dump Objects to XML. TODO Move this to testing here and introduce 
			this as compile dependency to build it with a profile later -->
		<dependency>
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
			<version>1.4.10</version>
		</dependency>
	</dependencies>

	<!-- Organize testing such that system tests are run in a different way 
			that unit tests, in particular by encapsulating them into a separate JVM -->
		<!-- Solution inspired by: Taken from : https://stackoverflow.com/questions/2606572/junit-splitting-integration-test-and-unit-tests/10381662#10381662 -->
<!-- 	<profiles>	
		<profile>
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.20.1</version>
						This forces to use the proper junit runner. Old versions do not 
							support categories
						<dependencies>
							<dependency>
								<groupId>org.apache.maven.surefire</groupId>
								<artifactId>surefire-junit47</artifactId>
								<version>2.20.1</version>
							</dependency>
						</dependencies>
						<configuration>
							<excludedGroups>de.unipassau.abc.utils.SystemTest,de.unipassau.abc.utils.ManualTest</excludedGroups>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>system-tests</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.20.1</version>
						This forces to use the proper junit runner. Old versions do not 
							support categories
						<dependencies>
							<dependency>
								<groupId>org.apache.maven.surefire</groupId>
								<artifactId>surefire-junit47</artifactId>
								<version>2.20.1</version>
							</dependency>
						</dependencies>
						<configuration> 
							<! - - From : http://maven.apache.org/surefire/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html 
								forkCount=1/reuseForks=false executes each test class in its own JVM process, 
								one after another. It creates the highest level of separation for the test 
								execution, but it would probably also give you the longest execution time 
								of all the available options. Consider it as a last resort. - - >
							<! - - Do not parallelize, but just fork a new JVM each time - - >
							<forkCount>1</forkCount>
							<reuseForks>false</reuseForks>
							<! - - Only consider tests marked as IntegrationTest - - >
							<groups>de.unipassau.abc.utils.SystemTest</groups>
							<! - - Do not clog the console but write to output files - - >
							<redirectTestOutputToFile>true</redirectTestOutputToFile>
							<argLine>-Xmx4g -Xms512m -XX:+UseParallelGC -XX:NewRatio=2</argLine>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	-->
</project>
