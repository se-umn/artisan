<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>de.unipassau.abc</groupId>
	<artifactId>carving</artifactId>
	<packaging>jar</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>ABC Framework for Action-Based test Carving</name>
	<developers>
		<developer>
			<id>gambi</id>
			<name>Alessio Gambi</name>
			<email>alessio.gambi@uni-passau.de</email>
		</developer>
	</developers>

	<repositories>
		<repository>
			<!-- Temporary repo to store soot -->
			<id>project</id>
			<url>file:///${basedir}/local-repo</url>
		</repository>
		<repository>
			<id>google</id>
			<url>https://maven.google.com</url>
		</repository>
		<repository>
			<id>central</id>
			<url>http://central.maven.org/maven2/</url>
		</repository>
	</repositories>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>appassembler-maven-plugin</artifactId>
				<version>1.10</version>
				<configuration>
					<programs>
						<program>
							<mainClass>de.unipassau.abc.parsing.DuafDroidParser</mainClass>
							<id>parse</id>
						</program>
						<program>
							<mainClass>de.unipassau.abc.carving.AndroidCarver</mainClass>
							<id>carve</id>
						</program>
						<program>
							<mainClass>de.unipassau.abc.generation.AndroidActivityTestGenerator</mainClass>
							<id>generate</id>
						</program>

					</programs>
					<!-- <configurationDirectory>libs</configurationDirectory> <configurationSourceDirectory>libs</configurationSourceDirectory> 
						<copyConfigurationDirectory>true</copyConfigurationDirectory> -->
				</configuration>
			</plugin>
		</plugins>

	</build>

	<dependencies>
		<!-- Plain Java Code Generation: https://github.com/square/javapoet -->
		<dependency>
			<groupId>com.squareup</groupId>
			<artifactId>javapoet</artifactId>
			<version>1.11.1</version>
		</dependency>

		<dependency>
			<groupId>org.robolectric</groupId>
			<artifactId>robolectric</artifactId>
			<version>4.2</version>
			<exclusions>
				<exclusion>
					<groupId>androidx.test</groupId>
					<artifactId>monitor</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Command Line parsing -->
		<dependency>
			<groupId>com.lexicalscope.jewelcli</groupId>
			<artifactId>jewelcli</artifactId>
			<version>0.8.9</version>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.20</version>
		</dependency>

		<!-- FIXME: "Install" Soot properly ... For some reason this is already 
			packaged in the soot distribution -->
		<!-- TODO This might break the current functionalities of ABC -->
		<!-- <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-simple</artifactId> 
			<version>1.7.20</version> </dependency> -->

		<!-- Soot for Instrumentation, Static Analysis and Code Generation -->
		<dependency>
			<groupId>sable</groupId>
			<artifactId>soot</artifactId>
			<version>2.6.0-SNAPSHOT</version>
		</dependency>
		<!-- Utility for Decompiling Class files into Java -->
		<!-- THis is nice but becomes superflous if we generate java code directly -->
		<dependency>
			<groupId>org.bitbucket.mstrobel</groupId>
			<artifactId>procyon-compilertools</artifactId>
			<version>0.5.32</version>
		</dependency>
		<!-- Sets operators. TODO I am afraid that guava would be overkilling -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>23.0</version>
		</dependency>
		<!-- Dump Objects to XML. TODO Move this to testing here and introduce 
			this as compile dependency to build it with a profile later -->
		<dependency>
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
			<version>1.4.10</version>
		</dependency>


		<!-- Test suite reduction -->
		<!-- Using the release jar, e.g., core-0.8.1 breaks -->
		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>jacoco-maven-plugin</artifactId>
			<version>0.7.7.201606060606</version>
		</dependency>

		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>org.jacoco.ant</artifactId>
			<version>0.7.7.201606060606</version>
		</dependency>

		<!-- Code Generation -->
		<dependency>
			<groupId>com.github.javaparser</groupId>
			<artifactId>javaparser-core</artifactId>
			<version>3.5.15</version>
		</dependency>
		<dependency>
			<groupId>com.github.javaparser</groupId>
			<artifactId>javaparser-symbol-solver-core</artifactId>
			<version>3.5.15</version>
		</dependency>


		<!-- Graph Datastructures and Visualization -->
		<!-- TODO Check if ALL those libraries are really needed -->
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-graph-impl</artifactId>
			<version>2.1.1</version>
		</dependency>
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-visualization</artifactId>
			<version>2.1.1</version>
		</dependency>
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-api</artifactId>
			<version>2.1.1</version>
		</dependency>
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-algorithms</artifactId>
			<version>2.1.1</version>
		</dependency>
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-io</artifactId>
			<version>2.1.1</version>
		</dependency>

		<!-- Testing and Test Code generation. We need junit also during compile -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
		</dependency>

		<!-- Utility to quickly find system settings and options -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.5</version>
		</dependency>

		<!-- Mocking -->
		<!-- We use mocking to generate code -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.5</version>
			<!-- <scope>test</scope> -->
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-mockito</artifactId>
			<version>1.5.6</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4</artifactId>
			<version>1.5.6</version>
			<scope>test</scope>
		</dependency>


		<!-- For the generated system tests -->
		<dependency>
			<groupId>com.github.stefanbirkner</groupId>
			<artifactId>system-rules</artifactId>
			<version>1.17.0</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<profiles>
		<!-- We need to invoke soot passing Trace in a separate jar ... this is 
			how we create the jar -->
		<profile>
			<id>trace</id>
			<build>
				<finalName>trace</finalName>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<version>3.0.2</version>
						<configuration>
							<includes>
								<include>**/de/unipassau/abc/tracing/*</include>
								<include>**/de/unipassau/abc/carving/*</include>
								<include>**/de/unipassau/abc/utils/*</include>
							</includes>
							<outputDirectory>./libs</outputDirectory>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- Create the test subject jars for integration testing -->
		<profile>
			<id>testsubject</id>
			<build>
				<finalName>testsubject</finalName>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<version>3.0.2</version>
						<executions>
							<execution>
								<goals>
									<goal>test-jar</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<includes>
								<include>**/de/unipassau/abc/testsubject/*</include>
								<include>**/de/unipassau/abc/testsubject2/*</include>
								<include>**/de/unipassau/abc/testsubject3/*</include>
								<include>**/de/unipassau/abc/testsubject4/*</include>
							</includes>
							<outputDirectory>./libs</outputDirectory>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- Organize testing such that system tests are run in a different way 
			that unit tests, in particular by encapsulating them into a separate VM -->
		<!-- Solution inspired by: Taken from : https://stackoverflow.com/questions/2606572/junit-splitting-integration-test-and-unit-tests/10381662#10381662 -->
		<profile>
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.20.1</version>
						<!-- This forces to use the proper junit runner. Old versions do not 
							support categories -->
						<dependencies>
							<dependency>
								<groupId>org.apache.maven.surefire</groupId>
								<artifactId>surefire-junit47</artifactId>
								<version>2.20.1</version>
							</dependency>
						</dependencies>
						<configuration>
							<excludedGroups>de.unipassau.abc.utils.SystemTest,de.unipassau.abc.utils.ManualTest</excludedGroups>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>system-tests</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.20.1</version>
						<!-- This forces to use the proper junit runner. Old versions do not 
							support categories -->
						<dependencies>
							<dependency>
								<groupId>org.apache.maven.surefire</groupId>
								<artifactId>surefire-junit47</artifactId>
								<version>2.20.1</version>
							</dependency>
						</dependencies>
						<configuration>
							<!-- From : http://maven.apache.org/surefire/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html 
								forkCount=1/reuseForks=false executes each test class in its own JVM process, 
								one after another. It creates the highest level of separation for the test 
								execution, but it would probably also give you the longest execution time 
								of all the available options. Consider it as a last resort. -->
							<!-- Do not parallelize, but just fork a new JVM each time -->
							<forkCount>1</forkCount>
							<reuseForks>false</reuseForks>
							<!-- Only consider tests marked as IntegrationTest -->
							<groups>de.unipassau.abc.utils.SystemTest</groups>
							<!-- Do not clog the console but write to output files -->
							<redirectTestOutputToFile>true</redirectTestOutputToFile>
							<argLine>-Xmx4g -Xms512m -XX:+UseParallelGC -XX:NewRatio=2</argLine>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
