package org.hotelme;

import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.util.ArrayList;
import org.junit.Test;
import java.io.InputStream;
import java.sql.Date;
import java.util.Scanner;
import java.sql.DriverManager;
import org.hotelme.utils.SystemTestUtils;
import org.junit.contrib.java.lang.system.ExpectedSystemExit;
import org.junit.Rule;
import org.junit.contrib.java.lang.system.TextFromStandardInputStream;

public class TestRoom
{
    @Rule
    public final TextFromStandardInputStream userInputs;
    @Rule
    public final ExpectedSystemExit expectedSystemExit;
    
    @Test
    public void test_31() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
    }
    
    @Test
    public void test_37() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
    }
    
    @Test
    public void test_40() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        final ArrayList<Room> room = hotelModel.getRoom();
        room.get(0).getMaxOccupancy();
        room.get(0).getMaxOccupancy();
    }
    
    @Test
    public void test_41() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
    }
    
    @Test
    public void test_42() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        final ArrayList<Room> room = hotelModel.getRoom();
        room.get(0).getMaxOccupancy();
        final Room value = room.get(0);
        value.getMaxOccupancy();
        scanner.nextInt();
        value.getRoomID();
    }
    
    @Test
    public void test_43() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        final ArrayList<Room> room = hotelModel.getRoom();
        room.get(0).getMaxOccupancy();
        room.get(0).getMaxOccupancy();
        scanner.nextInt();
        room.get(0).getRoomID();
    }
    
    @Test
    public void test_44() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        final Object value = hotelModel.getRoom().get(0);
        ((Room)value).getMaxOccupancy();
        scanner.nextInt();
        ((Room)value).getRoomID();
    }
    
    @Test
    public void test_45() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        final ArrayList<Room> room = hotelModel.getRoom();
        room.get(0).getMaxOccupancy();
        final Room value = room.get(0);
        value.getMaxOccupancy();
        scanner.nextInt();
        value.getRoomID();
        value.getRoomType();
    }
    
    @Test
    public void test_46() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        final Object value = hotelModel.getRoom().get(0);
        ((Room)value).getMaxOccupancy();
        scanner.nextInt();
        ((Room)value).getRoomID();
        ((Room)value).getRoomType();
    }
    
    @Test
    public void test_47() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        final ArrayList<Room> room = hotelModel.getRoom();
        room.get(0).getMaxOccupancy();
        final Room value = room.get(0);
        value.getMaxOccupancy();
        scanner.nextInt();
        value.getRoomID();
        value.getRoomType();
        value.getOwner();
    }
    
    @Test
    public void test_48() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getRoomID();
    }
    
    @Test
    public void test_49() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        final ArrayList<Room> room = hotelModel.getRoom();
        room.get(0).getMaxOccupancy();
        room.get(0).getMaxOccupancy();
        scanner.nextInt();
        room.get(0).getRoomID();
        room.get(0).getRoomType();
    }
    
    @Test
    public void test_50() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        final Object value = hotelModel.getRoom().get(0);
        ((Room)value).getMaxOccupancy();
        scanner.nextInt();
        ((Room)value).getRoomID();
        ((Room)value).getRoomType();
        ((Room)value).getOwner();
    }
    
    @Test
    public void test_51() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        final ArrayList<Room> room = hotelModel.getRoom();
        room.get(0).getMaxOccupancy();
        room.get(0).getMaxOccupancy();
        scanner.nextInt();
        room.get(0).getRoomID();
        room.get(0).getRoomType();
        room.get(0).getOwner();
    }
    
    @Test
    public void test_52() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getRoomID();
        ((Room)hotelModel.getRoom().get(0)).getRoomType();
    }
    
    @Test
    public void test_59() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getRoomID();
        ((Room)hotelModel.getRoom().get(0)).getRoomType();
        ((Room)hotelModel.getRoom().get(0)).getOwner();
    }
    
    @Test
    public void test_60() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        final Room room = new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f);
    }
    
    @Test
    public void test_66() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        final Room room = new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f);
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        room.getMaxOccupancy();
    }
    
    @Test
    public void test_69() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        final Room room = new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f);
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getMaxOccupancy();
    }
    
    @Test
    public void test_70() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        final Room room = new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f);
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getMaxOccupancy();
        room.getMaxOccupancy();
    }
    
    @Test
    public void test_72() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        final Room room = new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f);
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getMaxOccupancy();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getRoomID();
    }
    
    @Test
    public void test_73() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
    }
    
    @Test
    public void test_74() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        final Room room = new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f);
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getMaxOccupancy();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getRoomID();
        room.getRoomType();
    }
    
    @Test
    public void test_75() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        final Room room = new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f);
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getMaxOccupancy();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getRoomID();
        room.getRoomType();
        room.getOwner();
    }
    
    @Test
    public void test_76() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
    }
    
    @Test
    public void test_77() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        list.get(0).getMaxOccupancy();
    }
    
    @Test
    public void test_78() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        final Room value = list.get(0);
        value.getMaxOccupancy();
        scanner.nextInt();
        value.getRoomID();
    }
    
    @Test
    public void test_79() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getRoomID();
    }
    
    @Test
    public void test_80() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        final Room value = list.get(0);
        value.getMaxOccupancy();
        scanner.nextInt();
        value.getRoomID();
        value.getRoomType();
    }
    
    @Test
    public void test_82() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        final Room value = list.get(0);
        value.getMaxOccupancy();
        scanner.nextInt();
        value.getRoomID();
        value.getRoomType();
        value.getOwner();
    }
    
    @Test
    public void test_84() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getRoomID();
        list.get(0).getRoomType();
    }
    
    @Test
    public void test_86() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getRoomID();
        list.get(0).getRoomType();
        list.get(0).getOwner();
    }
    
    @Test
    public void test_182() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
    }
    
    @Test
    public void test_186() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        final Object value = hotelModel.getRoom().get(0);
        ((Room)value).getMaxOccupancy();
        scanner.nextInt();
        ((Room)value).getMaxOccupancy();
    }
    
    @Test
    public void test_189() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        final ArrayList<Room> room = hotelModel.getRoom();
        room.get(0).getMaxOccupancy();
        scanner.nextInt();
        room.get(0).getMaxOccupancy();
    }
    
    @Test
    public void test_190() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        final Object value = hotelModel.getRoom().get(0);
        ((Room)value).getMaxOccupancy();
        scanner.nextInt();
        ((Room)value).getMaxOccupancy();
        ((Room)value).getMaxOccupancy();
    }
    
    @Test
    public void test_192() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
    }
    
    @Test
    public void test_194() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        final Object value = hotelModel.getRoom().get(0);
        ((Room)value).getMaxOccupancy();
        scanner.nextInt();
        ((Room)value).getMaxOccupancy();
        ((Room)value).getMaxOccupancy();
        scanner.nextInt();
        ((Room)value).getRoomID();
    }
    
    @Test
    public void test_195() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        final ArrayList<Room> room = hotelModel.getRoom();
        room.get(0).getMaxOccupancy();
        scanner.nextInt();
        room.get(0).getMaxOccupancy();
        room.get(0).getMaxOccupancy();
    }
    
    @Test
    public void test_196() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
    }
    
    @Test
    public void test_197() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        final ArrayList<Room> room = hotelModel.getRoom();
        room.get(0).getMaxOccupancy();
        scanner.nextInt();
        room.get(0).getMaxOccupancy();
        room.get(0).getMaxOccupancy();
        scanner.nextInt();
        room.get(0).getRoomID();
    }
    
    @Test
    public void test_198() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        final ArrayList<Room> room = hotelModel.getRoom();
        room.get(0).getMaxOccupancy();
        scanner.nextInt();
        room.get(0).getMaxOccupancy();
        room.get(0).getMaxOccupancy();
        scanner.nextInt();
        room.get(0).getRoomID();
        room.get(0).getRoomType();
    }
    
    @Test
    public void test_199() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getRoomID();
    }
    
    @Test
    public void test_200() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        final ArrayList<Room> room = hotelModel.getRoom();
        room.get(0).getMaxOccupancy();
        scanner.nextInt();
        room.get(0).getMaxOccupancy();
        room.get(0).getMaxOccupancy();
        scanner.nextInt();
        room.get(0).getRoomID();
        room.get(0).getRoomType();
        room.get(0).getOwner();
    }
    
    @Test
    public void test_202() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getRoomID();
        ((Room)hotelModel.getRoom().get(0)).getRoomType();
    }
    
    @Test
    public void test_207() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final HotelModel hotelModel = new HotelModel(DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd"));
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String[] split = (scanner.next() + " " + scanner.next()).split(" ");
        hotelModel.userLogin(split[0], split[1]);
        hotelModel.getUser();
        scanner.nextInt();
        hotelModel.checkReservedRooms();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s = "";
        s.equals(s);
        scanner.nextInt();
        final String s2 = "Happy Double";
        final String s3 = "invalid";
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s3);
        s2.equals(s);
        s2.equals(s);
        hotelModel.checkRoomsAvailable(new Date(1522706400000L), new Date(1522879200000L), s2);
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        ((Room)hotelModel.getRoom().get(0)).getMaxOccupancy();
        scanner.nextInt();
        ((Room)hotelModel.getRoom().get(0)).getRoomID();
        ((Room)hotelModel.getRoom().get(0)).getRoomType();
        ((Room)hotelModel.getRoom().get(0)).getOwner();
    }
    
    @Test
    public void test_209() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        final Room room = new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f);
    }
    
    @Test
    public void test_216() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        final Room room = new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f);
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        room.getMaxOccupancy();
    }
    
    @Test
    public void test_218() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        final Room room = new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f);
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getMaxOccupancy();
    }
    
    @Test
    public void test_219() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        final Room room = new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f);
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getMaxOccupancy();
        room.getMaxOccupancy();
    }
    
    @Test
    public void test_221() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        final Room room = new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f);
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getMaxOccupancy();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getRoomID();
    }
    
    @Test
    public void test_222() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
    }
    
    @Test
    public void test_223() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        final Room room = new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f);
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getMaxOccupancy();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getRoomID();
        room.getRoomType();
    }
    
    @Test
    public void test_224() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        final Room room = new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f);
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getMaxOccupancy();
        room.getMaxOccupancy();
        scanner.nextInt();
        room.getRoomID();
        room.getRoomType();
        room.getOwner();
    }
    
    @Test
    public void test_225() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        final Room value = list.get(0);
        value.getMaxOccupancy();
        scanner.nextInt();
        value.getMaxOccupancy();
    }
    
    @Test
    public void test_226() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
    }
    
    @Test
    public void test_227() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        final Room value = list.get(0);
        value.getMaxOccupancy();
        scanner.nextInt();
        value.getMaxOccupancy();
        value.getMaxOccupancy();
    }
    
    @Test
    public void test_228() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        final Room value = list.get(0);
        value.getMaxOccupancy();
        scanner.nextInt();
        value.getMaxOccupancy();
        value.getMaxOccupancy();
        scanner.nextInt();
        value.getRoomID();
    }
    
    @Test
    public void test_229() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        list.get(0).getMaxOccupancy();
    }
    
    @Test
    public void test_231() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getRoomID();
    }
    
    @Test
    public void test_233() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getRoomID();
        list.get(0).getRoomType();
    }
    
    @Test
    public void test_235() throws Exception {
        this.userInputs.provideLines(new String[] { Integer.toString(1), "test", "1234", Integer.toString(1), Integer.toString(2), "04/03/18", "04/05/18", Integer.toString(1), Integer.toString(1), Integer.toString(2), Integer.toString(2) });
        final InputStream in = System.in;
        SystemTestUtils.dropAndRecreateTheDbFromResource("/hotelme.sql");
        final Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotelme", "hotelmanager", "qweasd");
        final ArrayList<Room> list = new ArrayList<Room>();
        final Scanner scanner = new Scanner(in);
        scanner.nextInt();
        final String s = (scanner.next() + " " + scanner.next()).split(" ")[0];
        final PreparedStatement prepareStatement = connection.prepareStatement("SELECT * FROM users WHERE uname = ?");
        prepareStatement.setString(1, s);
        final ResultSet executeQuery = prepareStatement.executeQuery();
        executeQuery.next();
        executeQuery.getString("pw");
        executeQuery.getInt("userID");
        executeQuery.getString("fname");
        executeQuery.getString("lname");
        executeQuery.getString("uname");
        executeQuery.getString("pw");
        scanner.nextInt();
        list.clear();
        final PreparedStatement prepareStatement2 = connection.prepareStatement("SELECT * FROM rooms LEFT OUTER JOIN reservations ON rooms.roomID = reservations.roomID WHERE reserveID IS NOT NULL AND userID = ?");
        prepareStatement2.setInt(1, 3);
        prepareStatement2.executeQuery().next();
        scanner.nextInt();
        scanner.next();
        scanner.next();
        final String s2 = "";
        s2.equals(s2);
        scanner.nextInt();
        final String s3 = "Happy Double";
        final String s4 = "invalid";
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s4);
        s3.equals(s2);
        s3.equals(s2);
        final Date date = new Date(1522706400000L);
        final Date date2 = new Date(1522879200000L);
        list.clear();
        final PreparedStatement prepareStatement3 = connection.prepareStatement("SELECT * FROM rooms WHERE roomType = ? AND roomID NOT IN (SELECT roomID FROM reservations WHERE ? >= checkIn OR ? > checkIn)");
        prepareStatement3.setString(1, s3);
        prepareStatement3.setDate(2, date);
        prepareStatement3.setDate(3, date2);
        final ResultSet executeQuery2 = prepareStatement3.executeQuery();
        executeQuery2.next();
        executeQuery2.getInt("roomID");
        executeQuery2.getInt("price");
        executeQuery2.getInt("maxOccupancy");
        list.add(new Room(0, 4, s3, 4, 0, 0, 3, (java.util.Date)date, (java.util.Date)date2, 69.0f));
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        executeQuery2.next();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getMaxOccupancy();
        list.get(0).getMaxOccupancy();
        scanner.nextInt();
        list.get(0).getRoomID();
        list.get(0).getRoomType();
        list.get(0).getOwner();
    }
    
    public TestRoom() {
        this.userInputs = TextFromStandardInputStream.emptyStandardInputStream();
        this.expectedSystemExit = ExpectedSystemExit.none();
    }
}
